//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CottageCareOnlinePricing.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;

    public partial class CottageCareOnlinePricingEntities : DbContext
    {
        public CottageCareOnlinePricingEntities()
            : base("name=CottageCareOnlinePricingConnectionString")
        {
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
        public virtual DbSet<AdditionalRoomsDetail> AdditionalRoomsDetails { get; set; }
        public virtual DbSet<CleaningAppointment> CleaningAppointments { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<FloorType> FloorTypes { get; set; }
        public virtual DbSet<GuestUser> GuestUsers { get; set; }
        public virtual DbSet<PostalCode> PostalCodes { get; set; }
        public virtual DbSet<QuoteDetail> QuoteDetails { get; set; }
        public virtual DbSet<Quote> Quotes { get; set; }
        public virtual DbSet<ReasonsMaster> ReasonsMasters { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<RoomType> RoomTypes { get; set; }
        public virtual DbSet<NonServiceablePostalCode> NonServiceablePostalCodes { get; set; }

        public override int SaveChanges()
        {
            var entries = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);

            foreach (var entry in entries)
            {
                var entity = entry.Entity;
                var entityType = entity.GetType();

                // Check if the entity has 'CreatedAt' property
                var createdAtProp = entityType.GetProperty("CreatedAt");
                if (entry.State == EntityState.Added && createdAtProp != null)
                {
                    createdAtProp.SetValue(entity, DateTime.UtcNow);
                }

                // Check if the entity has 'UpdatedAt' property
                var updatedAtProp = entityType.GetProperty("UpdatedAt");
                if (updatedAtProp != null)
                {
                    updatedAtProp.SetValue(entity, DateTime.UtcNow);
                }
            }
             return base.SaveChanges();
        }
    }
    public class DynamicDbContext : DbContext
    {
        public DynamicDbContext(string connectionString) : base(connectionString)
        {
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OtherRoom>().ToTable("OtherRooms");
        }
        public virtual DbSet<OtherRoom> OtherRooms { get; set; }

    }

}
